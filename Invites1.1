Complete Step-by-Step Guide for TwoBrains.ai Invite System
I'll walk you through all 5 steps in extreme detail, with clear explanations for non-developers.
Step 1: Supabase Database Setup
What you'll be doing:
Setting up tables in your database to store invite codes and track who invited whom.
How to do it:

Go to supabase.com and log in to your account
Find your TwoBrains project and click on it
In the left sidebar, click on "SQL Editor"
Click the "New Query" button
Delete any text that might be in the editor
Copy and paste ALL of this code:

sqlCopy-- 1. Enhanced profiles table with invite tracking
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT,
  display_name TEXT,
  invited_by UUID REFERENCES auth.users(id),
  invite_code_used TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);

-- 2. Dedicated invite codes table for better tracking
CREATE TABLE IF NOT EXISTS invite_codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code TEXT UNIQUE NOT NULL,
  created_by UUID REFERENCES auth.users(id) NOT NULL,
  max_uses INT DEFAULT 1,
  uses_left INT DEFAULT 1, 
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
  is_active BOOLEAN DEFAULT TRUE
);

-- 3. Table to track invite redemptions
CREATE TABLE IF NOT EXISTS invite_redemptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  invite_code_id UUID REFERENCES invite_codes(id) NOT NULL,
  redeemed_by UUID REFERENCES auth.users(id) NOT NULL,
  redeemed_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
);

-- 4. Function to validate and use an invite code
CREATE OR REPLACE FUNCTION use_invite_code(code_to_check TEXT, user_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
  invite_id UUID;
BEGIN
  -- Find the invite code and lock it for update
  SELECT id INTO invite_id 
  FROM invite_codes 
  WHERE code = code_to_check 
    AND uses_left > 0 
    AND is_active = TRUE
  FOR UPDATE;
  
  -- If code not found or no uses left
  IF invite_id IS NULL THEN
    RETURN FALSE;
  END IF;
  
  -- Decrement the uses left
  UPDATE invite_codes 
  SET uses_left = uses_left - 1 
  WHERE id = invite_id;
  
  -- Record the redemption
  INSERT INTO invite_redemptions (invite_code_id, redeemed_by)
  VALUES (invite_id, user_id);
  
  RETURN TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. Function to generate new invite codes for a user
CREATE OR REPLACE FUNCTION generate_invite_codes(user_id UUID, num_codes INT DEFAULT 5)
RETURNS SETOF invite_codes AS $$
DECLARE
  new_code TEXT;
  i INT;
BEGIN
  FOR i IN 1..num_codes LOOP
    -- Generate a unique 6-character code with user prefix
    new_code := SUBSTRING(user_id::TEXT, 1, 2) || 
                UPPER(SUBSTRING(MD5(RANDOM()::TEXT), 1, 4));
    
    -- Make sure it's unique
    WHILE EXISTS (SELECT 1 FROM invite_codes WHERE code = new_code) LOOP
      new_code := SUBSTRING(user_id::TEXT, 1, 2) || 
                  UPPER(SUBSTRING(MD5(RANDOM()::TEXT), 1, 4));
    END LOOP;
    
    -- Insert new code
    RETURN QUERY
    INSERT INTO invite_codes (code, created_by, max_uses, uses_left)
    VALUES (new_code, user_id, 1, 1)
    RETURNING *;
  END LOOP;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. Function to validate a code without using it (for checking before signup)
CREATE OR REPLACE FUNCTION validate_invite_code(code_to_check TEXT)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM invite_codes 
    WHERE code = code_to_check 
      AND uses_left > 0 
      AND is_active = TRUE
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 7. RLS Policies
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE invite_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE invite_redemptions ENABLE ROW LEVEL SECURITY;

-- Users can read their own profile
CREATE POLICY "Users can read own profile" 
  ON profiles FOR SELECT 
  USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" 
  ON profiles FOR UPDATE 
  USING (auth.uid() = id);

-- Users can read their own invite codes
CREATE POLICY "Users can view own invite codes" 
  ON invite_codes FOR SELECT 
  USING (auth.uid() = created_by);

-- Users can see who used their codes
CREATE POLICY "Users can see who used their codes" 
  ON invite_redemptions FOR SELECT 
  USING (
    EXISTS (
      SELECT 1 FROM invite_codes 
      WHERE invite_codes.id = invite_redemptions.invite_code_id
      AND invite_codes.created_by = auth.uid()
    )
  );

Click the "Run" button (it looks like a play button)
You should see a message saying the query was executed successfully


Why this matters: This sets up all the tables and functions needed to store and manage invite codes. Think of it like setting up a filing system with special rules for how invites work.

Step 2: Create First Invite Codes
What you'll be doing:
Creating the first batch of invite codes that you can share with people.
How to do it:

First, you need your User ID:

In Supabase, click on "Authentication" in the left sidebar
Click on "Users"
Find your email in the list and click on it
Look for "UUID" - this is your User ID
Copy this UUID (it's a long string of letters and numbers)


Go back to "SQL Editor" and click "New Query" again
Delete any text that might be in the editor
Copy and paste this code:

sqlCopy-- Creates 5 invite codes with 10 uses each
INSERT INTO invite_codes (code, created_by, max_uses, uses_left)
VALUES 
('TBRAIN001', 'YOUR_USER_ID', 10, 10),
('TBRAIN002', 'YOUR_USER_ID', 10, 10),
('TBRAIN003', 'YOUR_USER_ID', 10, 10),
('TBRAIN004', 'YOUR_USER_ID', 10, 10),
('TBRAIN005', 'YOUR_USER_ID', 10, 10);

Replace YOUR_USER_ID with the UUID you copied (keep the single quotes around it)
Click the "Run" button


Why this matters: You just created 5 unique invite codes that you can share with your first alpha users. Each can be used 10 times, so you can invite up to 50 people with these codes.

Step 3: Create Required Files
What you'll be doing:
Creating several JavaScript files needed for the invite system.
How to do it:

You'll need access to your codebase (ask your developer where these files are stored if you're not sure)
You need to create 4 new files. For each one, follow these steps:

Navigate to the src folder of your project
Create a new file with the specified name
Copy and paste the code for that file
Save the file



File 1: analytics.js
Create a new file called analytics.js and paste this code:
javascriptCopyimport mixpanel from 'mixpanel-browser';

// Replace with your actual Mixpanel token
const MIXPANEL_TOKEN = 'YOUR_MIXPANEL_TOKEN';

// Initialize Mixpanel
mixpanel.init(MIXPANEL_TOKEN, {debug: false}); 

// Analytics helper functions
export const Analytics = {
  // Track when someone views the join page
  trackJoinPageView: (inviteCode) => {
    mixpanel.track('Join Page View', {
      inviteCode: inviteCode || 'none'
    });
  },
  
  // Track when someone attempts to validate an invite code
  trackInviteValidation: (inviteCode, isValid) => {
    mixpanel.track('Invite Code Validation', {
      inviteCode: inviteCode,
      isValid: isValid
    });
  },
  
  // Track when someone sends/shares an invite
  trackInviteSent: (inviteCode) => {
    mixpanel.track('Invite Sent', {
      inviteCode: inviteCode
    });
  },
  
  // Track when someone accepts an invite
  trackInviteAccepted: (inviteCode, invitedBy) => {
    mixpanel.track('Invite Accepted', {
      inviteCode: inviteCode,
      invitedBy: invitedBy
    });
  },
  
  // Identify a user in Mixpanel
  identifyUser: (userId, userProperties) => {
    mixpanel.identify(userId);
    if (userProperties) {
      mixpanel.people.set(userProperties);
    }
  }
};

export default Analytics;
Important: Replace YOUR_MIXPANEL_TOKEN with your actual Mixpanel token. You can find this in Mixpanel under Project Settings > Project Token.
File 2: JoinPage.jsx
Create a new file called JoinPage.jsx and paste this code:
jsxCopyimport { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { createClient } from '@supabase/supabase-js';
import Analytics from './analytics'; // Import the analytics helper

// Create Supabase client - REPLACE WITH YOUR ACTUAL SUPABASE INFO
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url',
  process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key'
);

export default function JoinPage() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [inviteCode, setInviteCode] = useState(searchParams.get('invite') || '');
  const [email, setEmail] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [error, setError] = useState('');
  const [isValid, setIsValid] = useState(false);

  // Track page view
  useEffect(() => {
    Analytics.trackJoinPageView(searchParams.get('invite'));
  }, [searchParams]);

  // Check if user is already logged in
  useEffect(() => {
    const checkAuth = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        // User is logged in, redirect to dashboard
        navigate('/dashboard');
      }
    };
    checkAuth();
  }, [navigate]);

  // If invite code is in URL, validate it
  useEffect(() => {
    if (inviteCode) {
      validateInviteCode(inviteCode);
    }
  }, [inviteCode]);

  const validateInviteCode = async (code) => {
    setIsValidating(true);
    setError('');
    try {
      const { data, error } = await supabase.rpc('validate_invite_code', { 
        code_to_check: code 
      });
      
      if (error) throw error;
      setIsValid(!!data);
      
      // Track code validation in Mixpanel
      Analytics.trackInviteValidation(code, !!data);
      
      if (!data) {
        setError('Invalid or expired invite code');
      }
    } catch (err) {
      console.error('Error validating code:', err);
      setError('Something went wrong. Please try again.');
      setIsValid(false);
    } finally {
      setIsValidating(false);
    }
  };

  const handleSignInWithGoogle = async () => {
    if (!isValid) {
      setError('Please enter a valid invite code');
      return;
    }

    try {
      // Store invite code in localStorage so we can retrieve it after OAuth
      localStorage.setItem('pendingInviteCode', inviteCode);
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/oauth-callback`
        }
      });
      
      if (error) throw error;
    } catch (err) {
      console.error('Error signing in with Google:', err);
      setError('Failed to sign in with Google. Please try again.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        {/* REPLACE WITH YOUR LOGO */}
        <img 
          className="mx-auto h-12 w-auto" 
          src="/images/twobrains-logo.png" 
          alt="TwoBrains" 
        />
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Join the TwoBrains Alpha
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          You've been invited to try our exclusive alpha!
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {isValid ? (
            <div>
              <div className="rounded-md bg-green-50 p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-green-800">
                      Valid Invite Code
                    </h3>
                    <p className="mt-2 text-sm text-green-700">
                      Your invite code has been verified! Sign in with Google to continue.
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <button
                  onClick={handleSignInWithGoogle}
                  className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Sign in with Google
                </button>
              </div>
            </div>
          ) : (
            <div>
              <div>
                <label htmlFor="invite" className="block text-sm font-medium text-gray-700">
                  Invite Code
                </label>
                <div className="mt-1">
                  <input
                    id="invite"
                    name="invite"
                    type="text"
                    required
                    value={inviteCode}
                    onChange={(e) => setInviteCode(e.target.value)}
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Enter your invite code"
                  />
                </div>
              </div>

              {error && (
                <div className="mt-4 rounded-md bg-red-50 p-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-red-800">
                        {error}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              <div className="mt-4">
                <button
                  type="button"
                  onClick={() => validateInviteCode(inviteCode)}
                  disabled={isValidating || !inviteCode}
                  className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    isValidating || !inviteCode
                      ? 'bg-indigo-400 cursor-not-allowed' 
                      : 'bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'
                  }`}
                >
                  {isValidating ? 'Checking...' : 'Verify Invite Code'}
                </button>
              </div>
              
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-300"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-white text-gray-500">
                      Need an invite code?
                    </span>
                  </div>
                </div>
                <div className="mt-2 text-center text-xs text-gray-500">
                  Alpha access is by invitation only. Ask a friend with access to share their invite code with you.
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
Important:

Change /images/twobrains-logo.png to the actual path of your logo
You may want to customize colors by replacing bg-indigo-600 with your brand color

File 3: OAuthCallback.jsx
Create a new file called OAuthCallback.jsx and paste this code:
jsxCopyimport { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { createClient } from '@supabase/supabase-js';
import Analytics from './analytics'; // Import the analytics helper

// Create Supabase client - REPLACE WITH YOUR ACTUAL SUPABASE INFO
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url',
  process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key'
);

export default function OAuthCallback() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState('verifying');
  const [error, setError] = useState(null);
  const [inviteData, setInviteData] = useState(null);

  useEffect(() => {
    const handleInviteFlow = async () => {
      try {
        // First, check if the user is logged in
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError || !user) {
          setError("You need to be logged in. Please try again.");
          setStatus('error');
          return;
        }

        // Get the invite code from URL or localStorage
        let inviteCode = searchParams.get('invite');
        if (!inviteCode) {
          inviteCode = localStorage.getItem('pendingInviteCode');
          localStorage.removeItem('pendingInviteCode'); // Clear after use
        }
        
        if (!inviteCode) {
          setError("No invite code found. Please go back and try again.");
          setStatus('error');
          return;
        }

        // Check if the user already has a profile
        const { data: existingProfile } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', user.id)
          .maybeSingle();

        if (existingProfile) {
          // User already registered
          setInviteData({ alreadyRegistered: true });
          setStatus('success');
          
          // Identify user in Mixpanel
          Analytics.identifyUser(user.id, {
            email: user.email,
            already_registered: true
          });
          
          // Redirect to dashboard after a short delay
          setTimeout(() => {
            navigate('/dashboard');
          }, 1500);
          
          return;
        }

        // Use the invite code
        const { data: validCode, error: codeError } = await supabase
          .rpc('use_invite_code', { 
            code_to_check: inviteCode,
            user_id: user.id
          });

        if (codeError || !validCode) {
          setError("Invalid or expired invite code");
          setStatus('error');
          return;
        }

        // Get inviter information
        const { data: inviteInfo } = await supabase
          .from('invite_codes')
          .select('created_by')
          .eq('code', inviteCode)
          .single();

        // Create user profile
        await supabase.from('profiles').insert([
          {
            id: user.id,
            email: user.email,
            display_name: user.user_metadata?.full_name || user.email?.split('@')[0],
            invited_by: inviteInfo?.created_by || null,
            invite_code_used: inviteCode
          }
        ]);

        // Generate 5 invite codes for the new user
        await supabase.rpc('generate_invite_codes', { 
          user_id: user.id,
          num_codes: 5
        });

        // Track invite acceptance in Mixpanel
        Analytics.identifyUser(user.id, {
          email: user.email,
          invited_by: inviteInfo?.created_by || null,
          invite_code_used: inviteCode
        });
        Analytics.trackInviteAccepted(inviteCode, inviteInfo?.created_by || null);

        setInviteData({ 
          success: true,
          email: user.email 
        });
        setStatus('success');

        // Redirect to dashboard after success message
        setTimeout(() => {
          navigate('/dashboard');
        }, 2000);

      } catch (err) {
        console.error('Error in invite flow:', err);
        setError("Something went wrong. Please try again.");
        setStatus('error');
      }
    };

    handleInviteFlow();
  }, [navigate, searchParams]);

  if (status === 'verifying') {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4">
        <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900">Setting up your account...</h2>
            <div className="mt-4 flex justify-center">
              <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-gray-900"></div>
            </div>
            <p className="mt-4 text-sm text-gray-500">This will just take a moment.</p>
          </div>
        </div>
      </div>
    );
  }

  if (status === 'error') {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4">
        <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-red-600">Oops! Something went wrong</h2>
            <p className="mt-2 text-gray-600">{error}</p>
            <button
              onClick={() => navigate('/join')}
              className="mt-4 px-4 py-2 bg-gray-800 text-white rounded hover:bg-gray-700"
            >
              Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (status === 'success' && inviteData) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4">
        <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-green-600">
              {inviteData.alreadyRegistered 
                ? 'Welcome back!' 
                : 'Successfully joined TwoBrains Alpha!'}
            </h2>
            <p className="mt-2 text-gray-600">
              {inviteData.alreadyRegistered
                ? 'You\'re already registered. Redirecting to your dashboard...'
                : 'Your account has been created and you now have invite codes to share. Redirecting to your dashboard...'}
            </p>
            <div className="mt-4 flex justify-center">
              <div className="animate-pulse h-2 w-20 bg-green-500 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
}
File 4: InviteDashboard.jsx
Create a new file called InviteDashboard.jsx and paste this code:
jsxCopyimport { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import Analytics from './analytics'; // Import the analytics helper

// Create Supabase client - REPLACE WITH YOUR ACTUAL SUPABASE INFO
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL || 'your-supabase-url',
  process.env.REACT_APP_SUPABASE_ANON_KEY || 'your-supabase-anon-key'
);

export default function InviteDashboard() {
  const [inviteCodes, setInviteCodes] = useState([]);
  const [inviteLink, setInviteLink] = useState('');
  const [loading, setLoading] = useState(true);
  const [copiedIndex, setCopiedIndex] = useState(null);
  const [invitees, setInvitees] = useState([]);

  useEffect(() => {
    fetchInviteCodes();
    fetchInvitees();
  }, []);

  const fetchInviteCodes = async () => {
    try {
      setLoading(true);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { data, error } = await supabase
        .from('invite_codes')
        .select('*')
        .eq('created_by', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      setInviteCodes(data || []);
      
      // Pre-generate an invite link with the first available code
      const availableCode = data?.find(code => code.uses_left > 0);
      if (availableCode) {
        const baseUrl = window.location.origin;
        setInviteLink(`${baseUrl}/join?invite=${availableCode.code}`);
      }
      
    } catch (error) {
      console.error('Error fetching invite codes:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchInvitees = async () => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      // Get all invite codes created by this user
      const { data: codes } = await supabase
        .from('invite_codes')
        .select('id')
        .eq('created_by', user.id);

      if (!codes || codes.length === 0) return;

      // Get redemptions for these codes
      const { data: redemptions, error } = await supabase
        .from('invite_redemptions')
        .select(`
          id,
          redeemed_at,
          invite_code_id,
          redeemed_by,
          profiles:redeemed_by (
            email,
            display_name
          )
        `)
        .in('invite_code_id', codes.map(c => c.id))
        .order('redeemed_at', { ascending: false });

      if (error) throw error;
      
      setInvitees(redemptions || []);
      
    } catch (error) {
      console.error('Error fetching invitees:', error);
    }
  };

  const handleCopyCode = (code, index) => {
    navigator.clipboard.writeText(code);
    setCopiedIndex(index);
    
    // Track in Mixpanel
    Analytics.trackInviteSent(code);
    
    setTimeout(() => setCopiedIndex(null), 2000);
  };

  const handleCopyLink = () => {
    navigator.clipboard.writeText(inviteLink);
    
    // Track in Mixpanel
    const code = inviteLink.split('invite=')[1];
    if (code) {
      Analytics.trackInviteSent(code);
    }// Visual feedback that link was copied
    const linkInput = document.getElementById('invite-link');
    if (linkInput) {
      linkInput.select();
      setTimeout(() => {
        linkInput.blur();
      }, 1500);
    }
  };

  const generateInviteForm = (code) => {
    const baseUrl = window.location.origin;
    return `${baseUrl}/join?invite=${code}`;
  };

  return (
    <div className="px-4 py-6 sm:p-6 lg:p-8 bg-white shadow rounded-lg">
      <h2 className="text-lg font-medium leading-6 text-gray-900">Invite Friends to TwoBrains</h2>
      <p className="mt-1 text-sm text-gray-500">
        Share these invite codes with your friends to give them access to the alpha.
      </p>
      
      {/* Quick copy invite link */}
      <div className="mt-6">
        <label htmlFor="invite-link" className="block text-sm font-medium text-gray-700">
          Quick Share Link
        </label>
        <div className="mt-1 flex rounded-md shadow-sm">
          <input
            type="text"
            name="invite-link"
            id="invite-link"
            className="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-l-md focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300"
            value={inviteLink}
            readOnly
          />
          <button
            type="button"
            onClick={handleCopyLink}
            className="inline-flex items-center px-4 py-2 border border-transparent rounded-r-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Copy
          </button>
        </div>
        <p className="mt-2 text-xs text-gray-500">
          This link contains your invite code and will take your friend directly to the signup form.
        </p>
      </div>
      
      {/* Available invite codes */}
      <div className="mt-6">
        <h3 className="text-sm font-medium text-gray-900">Your Invite Codes</h3>
        
        {loading ? (
          <div className="mt-2 animate-pulse space-y-3">
            {[1, 2, 3].map((item) => (
              <div key={item} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        ) : inviteCodes.length === 0 ? (
          <p className="mt-2 text-sm text-gray-500">You don't have any invite codes yet.</p>
        ) : (
          <ul className="mt-2 divide-y divide-gray-200">
            {inviteCodes.map((invite, index) => (
              <li key={invite.id} className="py-3 flex justify-between items-center">
                <div className="flex items-center">
                  <span className={`font-mono text-sm ${invite.uses_left > 0 ? 'font-bold text-green-600' : 'text-gray-400'}`}>
                    {invite.code}
                  </span>
                  <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    {invite.uses_left} / {invite.max_uses} uses left
                  </span>
                </div>
                
                {invite.uses_left > 0 && (
                  <div className="ml-4 flex-shrink-0 flex">
                    <button
                      type="button"
                      onClick={() => handleCopyCode(invite.code, index)}
                      className={`inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded 
                        ${copiedIndex === index 
                          ? 'text-green-700 bg-green-100' 
                          : 'text-gray-700 bg-gray-100 hover:bg-gray-200'}`}
                    >
                      {copiedIndex === index ? 'Copied!' : 'Copy'}
                    </button>
                    
                      href={generateInviteForm(invite.code)}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="ml-2 inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200"
                    >
                      Open
                    </a>
                  </div>
                )}
              </li>
            ))}
          </ul>
        )}
      </div>
      
      {/* People you've invited */}
      {invitees.length > 0 && (
        <div className="mt-8 border-t border-gray-200 pt-6">
          <h3 className="text-sm font-medium text-gray-900">People You've Invited</h3>
          <ul className="mt-2 divide-y divide-gray-200">
            {invitees.map(invitee => (
              <li key={invitee.id} className="py-3 flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">
                    {invitee.profiles?.display_name || invitee.profiles?.email || 'Anonymous User'}
                  </p>
                  <p className="text-xs text-gray-500">
                    Joined {new Date(invitee.redeemed_at).toLocaleDateString()}
                  </p>
                </div>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Joined
                </span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

Why this matters: This component shows users their invite codes and lets them copy/share them with friends. It also shows them who they've invited.

Step 4: Set Up Environment Variables
What you'll be doing:
Creating a file with secret information that your app needs to connect to Supabase and Mixpanel.
How to do it:

Create a new file called .env.local in the root of your project
Copy and paste this code:

Copy# Supabase configuration
REACT_APP_SUPABASE_URL=https://your-project-id.supabase.co
REACT_APP_SUPABASE_ANON_KEY=your-supabase-anon-key

# Mixpanel configuration
REACT_APP_MIXPANEL_TOKEN=your-mixpanel-token

Replace the placeholders:

For Supabase information:

Go to your Supabase dashboard
Click on "Settings" in the left sidebar
Click on "API"
Copy the "URL" and replace https://your-project-id.supabase.co
Copy the "anon public" key and replace your-supabase-anon-key


For Mixpanel:

Go to your Mixpanel dashboard
Click on "Settings" then "Project Settings"
Find your project token and replace your-mixpanel-token






Why this matters: These are like secret keys that let your app talk to Supabase and Mixpanel. Without them, the invite system won't work.

Step 5: Update Your App's Routing and Add to Dashboard
What you'll be doing:
Adding the new pages to your app's navigation system and your dashboard.
How to do it:
Part 1: Update App.js (or main routing file)

Find your main App.js file
Add these imports at the top:

jsxCopyimport JoinPage from './JoinPage';
import OAuthCallback from './OAuthCallback';

Find where your routes are defined - it might look something like this:

jsxCopy<Routes>
  <Route path="/dashboard" element={<Dashboard />} />
  {/* other routes */}
</Routes>

Add these new routes:

jsxCopy<Route path="/join" element={<JoinPage />} />
<Route path="/oauth-callback" element={<OAuthCallback />} />
Part 2: Add Invite Dashboard to Your Dashboard

Find your Dashboard component file
Add this import at the top:

jsxCopyimport InviteDashboard from './InviteDashboard';

Find a good spot in your dashboard's JSX to add the invite section, and add:

jsxCopy<InviteDashboard />

Why this matters: This connects all the pieces together. The first part adds new pages for joining and handling Google sign-in. The second part adds the invite panel to your dashboard so users can see and share their codes.

Final Steps and Testing
After completing these 5 steps, you need to:

Install required libraries - Ask your developer to run:
Copynpm install @supabase/supabase-js react-router-dom mixpanel-browser

Deploy your changes - Ask your developer to deploy the updated site
Test the flow:

Go to your site at /join
Enter one of your invite codes (e.g., TBRAIN001)
Sign in with Google
You should be redirected to your dashboard with your invite codes
Try copying an invite code and using it in a new browser or incognito window



Troubleshooting Common Issues

Page Not Found (404) Error: Make sure your routing is set up correctly in App.js
Invite Code Not Working: Double-check that you ran the SQL scripts correctly
Google Sign-In Fails: Make sure your Google OAuth is set up in Supabase
Can't See Invite Dashboard: Make sure you added it to your dashboard component

If you encounter any specific issues, ask your developer to check the browser console (they can press F12 to see it) for error messages.
That's it! You've now implemented a complete invite system for TwoBrains.ai!
    
